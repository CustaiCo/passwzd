This utility allows you to use keyctl and a Password Safe
(http://passwordsafe.sourceforge.net/) database to automate password
entry. The program passwzd will output to standard output the selected
password allowing you to put it into any program that allows shell
commands to be run to obtain passwords when needed. The cachekey program
is to quickly add a new key with a timeout into your session keyring.

The secret phrase used to unlock the database is stored using the
keyutils (man 7 keyutils) of the Linux kernel. The name of the database
and the key to look for are stored in a configuration file, default
path ~/.pwsafe/psaferc or this can be set with the PSAFERC environment
variable. The key should be in the session keyring of the spawning
program's process.

This library needs libuuid as a dependency from the Password Safe code,
and additionally libkeyutils and libsystemd for the key management and
logging parts of the application.

The argument to the passwzd program is either the UUID of the record
(for newer database formats only) or the title of the entry of the
password you wish to have output.

In order to put your key into the session keyring, you can use the
supplied cachekey program. It will either use the timeout from the
psaferc file or it will use the default timeout of one minute. After
that time the key will expire and won't be available. You can set
a special value of 0 in order to have the key not expire until the
keychain itself expires. This is usually whenever the process that set
up the key terminates.

This program uses the code for working with the password databases
directly from the sources for password safe on sourceforge.  Because it
uses the exact same code as the primary project, all password databases
should be fully supported.  The files in libs/, libcore.a and libos.a,
provided in binary form here, can be found in the lib/unicoderelease
folder after compiling Password Safe with a few custom options.  The
Makefile in src/core/ should be edited to remove -DUSE_XML_LIBRARY=XERCES
the compilation of the files under the src/core/XML folder as dependencies
in the build.  The XML code seems only to be needed for importing
certain XML formats from other utilities. NO_YUBI=1 has also been set
for the build, and it is a unicoderelease build.  The header files in
the included source have been slightly modified to use a flat directory
structure, and there is also a modified keyutils.h that has the code
needed for it to link properly with c++.
